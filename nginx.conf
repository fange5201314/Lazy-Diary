# 全局配置
user nginx;
worker_processes auto;  # 自动根据CPU核心数设置工作进程数
worker_cpu_affinity auto;  # 自动绑定CPU核心
worker_rlimit_nofile 65535;  # 每个worker进程的最大文件打开数

# 事件模块配置
events {
    worker_connections 10240;  # 每个worker进程的最大连接数
    multi_accept on;  # 允许一个worker进程同时接受多个连接
    use epoll;  # 使用epoll事件模型
}

# HTTP模块配置
http {
    # 基础配置
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # 隐藏Nginx版本信息

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # 访问日志
    access_log /var/log/nginx/access.log main buffer=16k;
    error_log /var/log/nginx/error.log warn;

    # 开启gzip压缩
    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    gzip_proxied any;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_valid 200 304 12h;
    proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;

    # 负载均衡配置
    upstream backend {
        least_conn;  # 最少连接数算法
        server 127.0.0.1:8080 weight=10 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8081 weight=10 max_fails=3 fail_timeout=30s;
        keepalive 32;  # 保持连接数
    }

    # 服务器配置
    server {
        listen 80;
        server_name localhost;
        client_max_body_size 10m;  # 限制上传文件大小

        # 静态文件配置
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
            
            # 静态文件缓存
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }

        # API代理配置
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 启用缓存
            proxy_cache my_cache;
            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;
            
            # 超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 跨域配置
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
            
            # 处理OPTIONS请求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # 健康检查
        location /health {
            access_log off;
            return 200 'healthy\n';
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 